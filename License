# 기본 라이센스
free

커밋 주의사항
1. 처음으로 커밋을 하기 전 사용자의 이름과 이베일 주소를 설정
2. 커밋 메세지 남기기 옵션 -m
3. 커밋할 파일을 git add로 지정해주기


작업 영역의 이름
1. working directory - 작업을 하는 프로젝트 디렉토리를 말함 ex) MathTool을 말함
2. staging area - git add를 한 파일들이 존재하는 영역, 커밋을 하게되면 이 영역에 있는 파일들만 커밋에 반영됨
3. repository - working directory의 변경 이력들이 저장되어 있는 영역, 커밋들이 저장되는 영역

즉, working directory에서 작업을 하여 작업한 파일들을 git add하여 staging area에 담고, 그 담겨있는 것들을 커밋하면 repository에 저장된다.


git의 상태
Untracked 상태
- '추적되지 않고 있는'이라는 뜻, 이 상태는 파일이 git에 의해서 그 변동사항이 전혀 추적되고 있지 않는 상태를 뜻함, ex) 파일을 새로 생성하고 그 파일을 한번도 git add해주지 않았다면 이 상태

Tracked 상태
- 파일이 git에 의해 그 변동사항이 추적되고 있는 상태 이 상태는 다시 그 특성에 따라 3가지 상태로 나뉨
1. Staged상태 
	- 파일의 내용이 수정되고나서, staging area에 올라와있는 상태를 Staged 상태라고 함
   새로 생성한 파일에 내용을 쓰고 git add를 해주거나, 한 번이라도 커미셍 포함됐었던 파일이라도 내용을 수정하고 git add를 해주면 이 상태

2. Unmodified(수정되지 않은, 변한게 없는) 상태 
	- 현재 파일의 내용이 최신 커밋의 모습과 비교했을 때 전혀 바뀐게 없는 상태면 Unmodified 상태, 커밋을 하고 난 직후에는 working directory 안의 모든 파일들이 이 상태가 됨

3. Modified(수정된) 상태
	- 최신 커밋의 모습과 비교했을 때 조금이라도 바뀐 내용이 있는 상태면 그 파일은 Modified 상태


로컬 레포지토리(내 컴퓨터) -> 리모트 레포지토리(github)  git push
리모트 레포지토리 -> 로컬 레포지토리  git pull


git clone - github에 있는 프로젝트를 내 컴퓨터로 가져오기

git push -u origin master - 로컬 레포지토리의 내용을 처음으로 리모트 레포지토리에 올릴 때 사용


커밋 히스토리 - 가장 아래에 있는게 가장 오래된 커밋내용 위로갈수록 최근
git log 
더 깔끔하게 보고 싶으면 
git log --pretty=oneline

특정 커밋만 보고 싶다면
git show 커밋고유번호 앞에 4자리정도만 입력


-m을 사용하지 않고 작성하는 방법
1. git commit만 입력하면 유닉스 화면으로 넘어감 i를 누른 뒤 메세지 입력
2. 메세지 내용 입력 후 엔터로 줄 바꿔 상세내용을 입력하고 싶으면 입력(메세지 제목과 내용 사이에 빈공간 한줄을 만들어 놔야함)
3. 다 적었다면 esc누른 후 :wq입력 후 엔터


최신 커밋 내용을 수정하고 싶다면
git commit --amend 를 입력하여 유닉스 화면 (vim)에서 수정


git reset - 과거 커밋으로 아예 돌아가고 싶을 때(재설정의 의미)
git reset --hard '이동하고자하는 커밋번호' 
or HEAD^ (HEAD가 가르키는 커밋 바로 전) or HEAD~n (HEAD가 가르키는 커밋 n단계 전) n = 숫자 넣기
--hard - working directory, staging area, HEAD 모두를 과거의 특정 커밋으로 바꾸고 싶을 때
--mixes - staging area, HEAD가 과거의 특정 커밋으로 바꾸고 싶을 때
--soft - HEAD만 과거의 특정 커밋으로 바꾸고 싶을 때


git tag - 프로젝트시 주요 버전의 시작점에 태그로 표시해주기 위해 사용
ex) git tag Version_1 커밋명 4자리
git show 태그명 - 태그와 연결된 커밋을 보고 싶을 때 사용


git branch 브랜치명 - 브랜치 생성
git branch -d 브랜치명 - 브랜치 삭제
git checkout -b 브랜치명 - 브랜치를 생성하면서 해당 브랜치로 이동
git merge main - 다른 브랜치에서 main 브랜치와 합치고 싶을 때


내 컴퓨터에서 깃 커밋을 하고 푸쉬를 하려는데 다른 개발자가 리모트에 깃 커밋을 해놓은 것이 있다면
1. 다른 개발자가 작업한 것을 날릴수 없기 때문에 깃 풀을 하여 다른 개발자가 커밋한 내용을 가져옴
2. 같은 줄에 내용에 다르다면 그 부분을 필요없는 부분은 지우고 수정(merge 처리)
3. 깃 add, 깃 커밋, 깃 푸쉬로 마무리


git fetch
merge를 하지않고 가져오기만 하는 방식도 있음
리모트 레포지토리에 있는 브랜치의 내용을 일단 가져와서 살펴본 후에 merge하고 싶을 때 사용

git fetch 주요 사용방식
1. git fetch로 리모트 레포지토리에서 내용을 가져온다
2. git diff 로컬 레포지토리 브랜치명 리모트 레포지토리 브랜치명 
	ex) git diff premium origin/premium
3. 해결방법은 
	3-1. 작업을 직접한 해당개발자에게 수정을 요구
	3-2-1. 직접처리 git merge 리모트 브랜치명
	3-2-2. 수정 후 git add -> git commit -> git push 처리


git blame 보고싶은 파일명
어떤 파일의 특정 코드를 누가 작성했는지 찾아내기 위한 커맨드
커밋 목록에서 상세 내용을 보고 싶다면
git show 보고싶은 커밋코드번호 4자리


이미 리모트 레포지토리에 올린 커밋을 취소하고싶다면?
git revert 작업을 되돌리고 싶은 커밋코드 4자리
커밋 메시지를 입력하라는 창으로 이동
git push로 마무리


더 과거의 커밋이나 여러개의 커밋을 한번에 처리하려면?
git revert 시작커밋번호..마지막커밋번호
시작커밋번호 다음 커밋부터 마지막커밋까지 revert함
커밋마다 커밋 메시지 작성을 하게 되는데 거의 그대로 둠


git reset을 하여 과거로 간뒤 다시 기존의 최근 커밋으로 가고싶다면?
최신 커밋번호를 입력하여 git reset을 한다면 다시 돌아올 수 있음

git reflog
HEAD가 그동안 가르켜온 커밋 내용을 보여줌 reference log의 줄임말
git reset --hard HEAD@{1} 이런식으로 입력도 가능


깃 히스토리를 보는 다양한 방법
git log --pretty=oneline --all
모든 브랜치의 커밋을 보는 방법 하지만 가독성이 좋지 않음
git log --pretty=oneline --all --graph
왼쪽에 별과 선으로 커밋상태를 입체적으로 보여줌


git rebase 브랜치명
깔끔한 커밋 히스토리를 원한다면
1. 원함는 브랜치로 이동 후 
2. 이 브랜치의 베이스를 원하는 브랜치로 재지정 - 커밋을 재배치
3. 컨플릭트가 발생되서 제대로 진행되지 못한경우 컨플릭트를 처리 후 git rebase --continue

rebase와 merge의 차이
1. rebase는 새로운 커밋을 만들지 않는다
2. rebase로 만들어진 커밋 히스토리는 merge로 만들어진 커밋 히스토리보다 좀 더 깔끔


git stash 
어떤 브랜치에서 하던 작업을 아직 커밋하지 않았는데 다른 브랜치로 가야하는 상황일 때 사용
작업 중이던 내용을 잠깐 저장할 때 사용
스택형식으로 저장됨
최근 커밋내용으로 돌아오고 중간에 작업한것들이 저장되어있음

git stash list
저장된 작업내용을 보고 싶을 때


잘못된 브랜치에서 작업했을 때
1. git stash
2. 원래 작업해야할 브랜치로 이동 git checkout 브랜치명
3. git stash apply 최근에 작업한 내용을 가져옴 또는 
	git stash apply stash@{0} 형식으로 작성하여 원하는 저장내용을 가져와도됨


git stash에 저장된 작업내용을 삭제하고 싶다면
git stash drop stash@{번호}
작업 내용을 적용하면서 스택에서 제거도 해주는 기능도 있음
git stash pop stash@{번호}


필요한 커밋만 가져오는 방법
git cherry-pick 가져오고싶은 커밋번호 4자리